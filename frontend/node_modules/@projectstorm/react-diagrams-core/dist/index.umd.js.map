{"version":3,"sources":["webpack://projectstorm/react-canvas-core/webpack/universalModuleDefinition","webpack://projectstorm/react-canvas-core/./src/DiagramEngine.ts","webpack://projectstorm/react-canvas-core/./src/entities/label/LabelModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/label/LabelWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/link-layer/LinkLayerFactory.tsx","webpack://projectstorm/react-canvas-core/./src/entities/link-layer/LinkLayerModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/link-layer/LinkLayerWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/link/LinkModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/link/LinkWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/link/PointModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/node-layer/NodeLayerFactory.tsx","webpack://projectstorm/react-canvas-core/./src/entities/node-layer/NodeLayerModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/node-layer/NodeLayerWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/node/NodeModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/node/NodeWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/port/PortModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/port/PortWidget.tsx","webpack://projectstorm/react-canvas-core/./src/index.ts","webpack://projectstorm/react-canvas-core/./src/models/DiagramModel.ts","webpack://projectstorm/react-canvas-core/./src/states/DefaultDiagramState.ts","webpack://projectstorm/react-canvas-core/./src/states/DragDiagramItemsState.ts","webpack://projectstorm/react-canvas-core/./src/states/DragNewLinkState.ts","webpack://projectstorm/react-canvas-core/external \"@emotion/styled\"","webpack://projectstorm/react-canvas-core/external \"@projectstorm/geometry\"","webpack://projectstorm/react-canvas-core/external \"@projectstorm/react-canvas-core\"","webpack://projectstorm/react-canvas-core/external \"lodash\"","webpack://projectstorm/react-canvas-core/external \"react\"","webpack://projectstorm/react-canvas-core/external \"resize-observer-polyfill\"","webpack://projectstorm/react-canvas-core/webpack/bootstrap","webpack://projectstorm/react-canvas-core/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","DiagramEngine","CanvasEngine","options","super","this","maxNumberPointsPerLink","nodeFactories","FactoryBank","linkFactories","portFactories","labelFactories","setup","registerListener","factoryAdded","event","setDiagramEngine","factoryRemoved","target","diagramModel","model","element","Toolkit","closest","nodeElement","getNode","getAttribute","getPort","getLink","getPointModel","node","getFactory","getType","link","label","port","getFactoryForLink","generateReactWidget","getFactoryForNode","selector","canvas","querySelector","getID","Error","getName","getParent","getPortCoords","getOrigin","getNodePortElement","sourceRect","getBoundingClientRect","point","getRelativeMousePoint","clientX","left","clientY","top","zoom","getZoomLevel","Rectangle","x","y","width","height","nodeRect","getNodeElement","nodes","length","Polygon","boundingBoxFromPolygons","map","getBoundingBox","getSelectedEntities","filter","entity","NodeModel","zoomToFitNodes","margin","maxZoom","getNodes","nodesRect","getBoundingNodesRect","canvasRect","calculate","xFactor","clientWidth","getWidth","yFactor","clientHeight","getHeight","zoomFactor","getTopLeft","params","setZoomLevel","setOffset","repaintCanvas","max","LabelModel","BaseModel","offsetX","offsetY","deserialize","data","serialize","S","Label","div","Foreign","foreignObject","LabelWidget","React","Component","props","findPathAndRelativePositionToRenderLabel","index","lengths","getRenderedPath","path","getTotalLength","labelPosition","reduce","previousValue","currentValue","getLabels","pathIndex","position","calculateLabelPosition","found","labelDimensions","ref","current","offsetWidth","offsetHeight","pathCentre","getPointAtLength","labelCoordinates","getOptions","style","transform","createRef","window","requestAnimationFrame","engine","getCanvas","key","getFactoryForLabel","LinkLayerFactory","AbstractReactFactory","LinkLayerModel","LinkLayerWidget","layer","LayerModel","type","isSvg","transformed","LinkModel","entityRemoved","removeLink","addModel","getModels","getLinkFactories","Container","_","getLinks","LinkWidget","diagramEngine","points","PointModel","sourcePort","targetPort","renderedPaths","labels","boundingBoxFromPoints","getPosition","getTargetPort","getSourcePort","getSelectionEntities","concat","slice","p","Point","forEach","labelOb","generateModel","addLabel","getModel","then","setTargetPort","source","setSourcePort","paths","lookupTable","clone","setPoints","getPoints","remove","getPointIndex","indexOf","id","i","getFirstPoint","getLastPoint","addLink","fireEvent","reportedPosition","getPointForPort","setPosition","getCenter","addPoint","generatePoint","setParent","push","pointModel","splice","state","sourceListener","deregister","targetListener","nextProps","prevState","reportInitialPosition","forceUpdate","prevProps","snapshot","installSource","installTarget","firstPoint","lastPoint","getX","getY","PeformanceWidget","serialized","generateWidgetForLink","labelModel","BasePositionModel","parent","getPortForPoint","removePoint","isLocked","NodeLayerFactory","NodeLayerModel","NodeLayerWidget","removeNode","getNodeFactories","NodeWidget","ports","old","portOb","getFactoryForPort","registerModel","addPort","portID","links","name","values","clearPort","Node","ob","disconnect","listener","installSelectionListener","selectionChanged","updateDimensions","getPorts","updateCoords","ex","entities","bounds","contentRect","updateSize","b","observe","className","generateWidgetForNode","PortModelAlignment","PortModel","alignment","parentNode","maximumLinks","isFinite","numberOfLinks","size","coords","reportPosition","PortWidget","engineListenerHandle","report","canvasReady","TESTING","keys","join","getExtraProps","children","DiagramModel","CanvasModel","addLayer","layers","activeNodeLayer","activeLinkLayer","getNodeLayers","getLinkLayers","models","addNode","getActiveLinkLayer","isCreated","getActiveNodeLayer","some","removeModel","flatMap","DefaultDiagramState","State","childStates","SelectingState","dragCanvas","DragCanvasState","dragNewLink","DragNewLinkState","dragItems","DragDiagramItemsState","registerAction","Action","InputType","MOUSE_DOWN","fire","getActionEventBus","getModelForEvent","transitionWithEvent","MoveItemsState","MOUSE_UP","item","getMouseElement","initialPositions","canLinkToPort","AbstractDisplacementState","config","allowLooseLinks","allowLinksFromLockedPorts","createLinkModel","setSelected","eject","portPos","zoomLevelPercentage","engineOffsetX","getOffsetX","engineOffsetY","getOffsetY","initialXRelative","initialYRelative","linkNextX","virtualDisplacementX","linkNextY","virtualDisplacementY","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"mappings":"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","file":"index.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"projectstorm/react-canvas-core\"] = factory();\n\telse\n\t\troot[\"projectstorm/react-canvas-core\"] = factory();\n})(self, function() {\nreturn ","import { NodeModel } from './entities/node/NodeModel';\nimport { PortModel } from './entities/port/PortModel';\nimport { LinkModel } from './entities/link/LinkModel';\nimport { LabelModel } from './entities/label/LabelModel';\nimport { Point, Rectangle, Polygon } from '@projectstorm/geometry';\nimport { MouseEvent } from 'react';\nimport {\n\tAbstractModelFactory,\n\tAbstractReactFactory,\n\tBaseModel,\n\tCanvasEngine,\n\tFactoryBank,\n\tToolkit,\n\tCanvasEngineListener,\n\tCanvasEngineOptions\n} from '@projectstorm/react-canvas-core';\nimport { DiagramModel } from './models/DiagramModel';\n\n/**\n * Passed as a parameter to the DiagramWidget\n */\nexport class DiagramEngine extends CanvasEngine<CanvasEngineListener, DiagramModel> {\n\tprotected nodeFactories: FactoryBank<AbstractReactFactory<NodeModel, DiagramEngine>>;\n\tprotected linkFactories: FactoryBank<AbstractReactFactory<LinkModel, DiagramEngine>>;\n\tprotected portFactories: FactoryBank<AbstractModelFactory<PortModel, DiagramEngine>>;\n\tprotected labelFactories: FactoryBank<AbstractReactFactory<LabelModel, DiagramEngine>>;\n\n\tmaxNumberPointsPerLink: number;\n\n\tconstructor(options: CanvasEngineOptions = {}) {\n\t\tsuper(options);\n\t\tthis.maxNumberPointsPerLink = 1000;\n\n\t\t// create banks for the different factory types\n\t\tthis.nodeFactories = new FactoryBank();\n\t\tthis.linkFactories = new FactoryBank();\n\t\tthis.portFactories = new FactoryBank();\n\t\tthis.labelFactories = new FactoryBank();\n\n\t\tconst setup = (factory: FactoryBank) => {\n\t\t\tfactory.registerListener({\n\t\t\t\tfactoryAdded: (event) => {\n\t\t\t\t\tevent.factory.setDiagramEngine(this);\n\t\t\t\t},\n\t\t\t\tfactoryRemoved: (event) => {\n\t\t\t\t\tevent.factory.setDiagramEngine(null);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tsetup(this.nodeFactories);\n\t\tsetup(this.linkFactories);\n\t\tsetup(this.portFactories);\n\t\tsetup(this.labelFactories);\n\t}\n\n\t/**\n\t * Gets a model and element under the mouse cursor\n\t */\n\tgetMouseElement(event: MouseEvent): BaseModel {\n\t\tvar target = event.target as Element;\n\t\tvar diagramModel = this.model;\n\n\t\t//is it a port\n\t\tvar element = Toolkit.closest(target, '.port[data-name]');\n\t\tif (element) {\n\t\t\tvar nodeElement = Toolkit.closest(target, '.node[data-nodeid]') as HTMLElement;\n\t\t\treturn diagramModel.getNode(nodeElement.getAttribute('data-nodeid')).getPort(element.getAttribute('data-name'));\n\t\t}\n\n\t\t//look for a point\n\t\telement = Toolkit.closest(target, '.point[data-id]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getLink(element.getAttribute('data-linkid')).getPointModel(element.getAttribute('data-id'));\n\t\t}\n\n\t\t//look for a link\n\t\telement = Toolkit.closest(target, '[data-linkid]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getLink(element.getAttribute('data-linkid'));\n\t\t}\n\n\t\t//look for a node\n\t\telement = Toolkit.closest(target, '.node[data-nodeid]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getNode(element.getAttribute('data-nodeid'));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//!-------------- FACTORIES ------------\n\n\tgetNodeFactories() {\n\t\treturn this.nodeFactories;\n\t}\n\n\tgetLinkFactories() {\n\t\treturn this.linkFactories;\n\t}\n\n\tgetLabelFactories() {\n\t\treturn this.labelFactories;\n\t}\n\n\tgetPortFactories() {\n\t\treturn this.portFactories;\n\t}\n\n\tgetFactoryForNode<F extends AbstractReactFactory<NodeModel, DiagramEngine>>(node: NodeModel | string) {\n\t\tif (typeof node === 'string') {\n\t\t\treturn this.nodeFactories.getFactory(node);\n\t\t}\n\t\treturn this.nodeFactories.getFactory(node.getType());\n\t}\n\n\tgetFactoryForLink<F extends AbstractReactFactory<LinkModel, DiagramEngine>>(link: LinkModel | string) {\n\t\tif (typeof link === 'string') {\n\t\t\treturn this.linkFactories.getFactory<F>(link);\n\t\t}\n\t\treturn this.linkFactories.getFactory<F>(link.getType());\n\t}\n\n\tgetFactoryForLabel<F extends AbstractReactFactory<LabelModel, DiagramEngine>>(label: LabelModel) {\n\t\tif (typeof label === 'string') {\n\t\t\treturn this.labelFactories.getFactory(label);\n\t\t}\n\t\treturn this.labelFactories.getFactory(label.getType());\n\t}\n\n\tgetFactoryForPort<F extends AbstractModelFactory<PortModel, DiagramEngine>>(port: PortModel) {\n\t\tif (typeof port === 'string') {\n\t\t\treturn this.portFactories.getFactory<F>(port);\n\t\t}\n\t\treturn this.portFactories.getFactory<F>(port.getType());\n\t}\n\n\tgenerateWidgetForLink(link: LinkModel): JSX.Element {\n\t\treturn this.getFactoryForLink(link).generateReactWidget({ model: link });\n\t}\n\n\tgenerateWidgetForNode(node: NodeModel): JSX.Element {\n\t\treturn this.getFactoryForNode(node).generateReactWidget({ model: node });\n\t}\n\n\tgetNodeElement(node: NodeModel): Element {\n\t\tconst selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n\t\tif (selector === null) {\n\t\t\tthrow new Error('Cannot find Node element with nodeID: [' + node.getID() + ']');\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetNodePortElement(port: PortModel): any {\n\t\tvar selector = this.canvas.querySelector(\n\t\t\t`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`\n\t\t);\n\t\tif (selector === null) {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot find Node Port element with nodeID: [' +\n\t\t\t\t\tport.getParent().getID() +\n\t\t\t\t\t'] and name: [' +\n\t\t\t\t\tport.getName() +\n\t\t\t\t\t']'\n\t\t\t);\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetPortCenter(port: PortModel): Point {\n\t\treturn this.getPortCoords(port).getOrigin();\n\t}\n\n\t/**\n\t * Calculate rectangular coordinates of the port passed in.\n\t */\n\tgetPortCoords(port: PortModel, element?: HTMLDivElement): Rectangle {\n\t\tif (!this.canvas) {\n\t\t\tthrow new Error('Canvas needs to be set first');\n\t\t}\n\t\tif (!element) {\n\t\t\telement = this.getNodePortElement(port);\n\t\t}\n\t\tconst sourceRect = element.getBoundingClientRect();\n\t\tconst point = this.getRelativeMousePoint({\n\t\t\tclientX: sourceRect.left,\n\t\t\tclientY: sourceRect.top\n\t\t});\n\t\tconst zoom = this.model.getZoomLevel() / 100.0;\n\t\treturn new Rectangle(point.x, point.y, sourceRect.width / zoom, sourceRect.height / zoom);\n\t}\n\n\t/**\n\t * Determine the width and height of the node passed in.\n\t * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n\t */\n\tgetNodeDimensions(node: NodeModel): { width: number; height: number } {\n\t\tif (!this.canvas) {\n\t\t\treturn {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t};\n\t\t}\n\n\t\tconst nodeElement = this.getNodeElement(node);\n\t\tconst nodeRect = nodeElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\twidth: nodeRect.width,\n\t\t\theight: nodeRect.height\n\t\t};\n\t}\n\n\tgetBoundingNodesRect(nodes: NodeModel[]): Rectangle {\n\t\tif (nodes) {\n\t\t\tif (nodes.length === 0) {\n\t\t\t\treturn new Rectangle(0, 0, 0, 0);\n\t\t\t}\n\n\t\t\treturn Polygon.boundingBoxFromPolygons(nodes.map((node) => node.getBoundingBox()));\n\t\t}\n\t}\n\n\tzoomToFitSelectedNodes(options: { margin?: number; maxZoom?: number }) {\n\t\tconst nodes: NodeModel[] = this.model\n\t\t\t.getSelectedEntities()\n\t\t\t.filter((entity) => entity instanceof NodeModel) as NodeModel[];\n\t\tthis.zoomToFitNodes({\n\t\t\tmargin: options.margin,\n\t\t\tmaxZoom: options.maxZoom,\n\t\t\tnodes: nodes.length > 0 ? nodes : null\n\t\t});\n\t}\n\n\tzoomToFitNodes(options: { margin?: number; nodes?: NodeModel[]; maxZoom?: number });\n\t/**\n\t * @deprecated\n\t */\n\tzoomToFitNodes(margin: number);\n\tzoomToFitNodes(options) {\n\t\tlet margin = options || 0;\n\t\tlet nodes: NodeModel[] = [];\n\t\tlet maxZoom: number | null = null;\n\t\tif (!!options && typeof options == 'object') {\n\t\t\tmargin = options.margin || 0;\n\t\t\tnodes = options.nodes || [];\n\t\t\tmaxZoom = options.maxZoom || null;\n\t\t}\n\n\t\t// no node selected\n\t\tif (nodes.length === 0) {\n\t\t\tnodes = this.model.getNodes();\n\t\t}\n\t\tconst nodesRect = this.getBoundingNodesRect(nodes);\n\t\tif (nodesRect) {\n\t\t\t// there is something we should zoom on\n\t\t\tlet canvasRect = this.canvas.getBoundingClientRect();\n\n\t\t\tconst calculate = (margin: number = 0) => {\n\t\t\t\t// work out zoom\n\t\t\t\tconst xFactor = this.canvas.clientWidth / (nodesRect.getWidth() + margin * 2);\n\t\t\t\tconst yFactor = this.canvas.clientHeight / (nodesRect.getHeight() + margin * 2);\n\n\t\t\t\tlet zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n\t\t\t\tif (maxZoom && zoomFactor > maxZoom) {\n\t\t\t\t\tzoomFactor = maxZoom;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tzoom: zoomFactor,\n\t\t\t\t\tx:\n\t\t\t\t\t\tcanvasRect.width / 2 -\n\t\t\t\t\t\t((nodesRect.getWidth() + margin * 2) * zoomFactor) / 2 +\n\t\t\t\t\t\tmargin -\n\t\t\t\t\t\tnodesRect.getTopLeft().x,\n\t\t\t\t\ty:\n\t\t\t\t\t\tcanvasRect.height / 2 -\n\t\t\t\t\t\t((nodesRect.getHeight() + margin * 2) * zoomFactor) / 2 +\n\t\t\t\t\t\tmargin -\n\t\t\t\t\t\tnodesRect.getTopLeft().y\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tlet params = calculate(0);\n\t\t\tif (margin) {\n\t\t\t\tif (params.x < margin || params.y < margin) {\n\t\t\t\t\tparams = calculate(margin);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// apply\n\t\t\tthis.model.setZoomLevel(params.zoom * 100);\n\t\t\tthis.model.setOffset(params.x, params.y);\n\t\t\tthis.repaintCanvas();\n\t\t}\n\t}\n\n\tgetMaxNumberPointsPerLink(): number {\n\t\treturn this.maxNumberPointsPerLink;\n\t}\n\n\tsetMaxNumberPointsPerLink(max: number) {\n\t\tthis.maxNumberPointsPerLink = max;\n\t}\n}\n","import { DiagramEngine } from '../../DiagramEngine';\nimport { LinkModel } from '../link/LinkModel';\nimport { BaseModel, BaseModelGenerics, BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface LabelModelOptions extends BaseModelOptions {\n\toffsetX?: number;\n\toffsetY?: number;\n}\n\nexport interface LabelModelGenerics extends BaseModelGenerics {\n\tPARENT: LinkModel;\n\tOPTIONS: LabelModelOptions;\n}\n\nexport class LabelModel<G extends LabelModelGenerics = LabelModelGenerics> extends BaseModel<G> {\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\toffsetX: options.offsetX || 0,\n\t\t\toffsetY: options.offsetY || 0\n\t\t});\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.offsetX = event.data.offsetX;\n\t\tthis.options.offsetY = event.data.offsetY;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\toffsetX: this.options.offsetX,\n\t\t\toffsetY: this.options.offsetY\n\t\t};\n\t}\n}\n","import * as React from 'react';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LabelModel } from './LabelModel';\nimport styled from '@emotion/styled';\n\nexport interface LabelWidgetProps {\n\tengine: DiagramEngine;\n\tlabel: LabelModel;\n\tindex: number;\n}\n\nnamespace S {\n\texport const Label = styled.div`\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t`;\n\n\texport const Foreign = styled.foreignObject`\n\t\tpointer-events: none;\n\t\toverflow: visible;\n\t`;\n}\n\nexport class LabelWidget extends React.Component<LabelWidgetProps> {\n\tref: React.RefObject<HTMLDivElement>;\n\n\tconstructor(props: LabelWidgetProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\tcomponentDidUpdate() {\n\t\twindow.requestAnimationFrame(this.calculateLabelPosition);\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.requestAnimationFrame(this.calculateLabelPosition);\n\t}\n\n\tfindPathAndRelativePositionToRenderLabel = (index: number): { path: SVGPathElement; position: number } => {\n\t\t// an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n\t\tconst link = this.props.label.getParent();\n\t\tconst lengths = link.getRenderedPath().map((path) => path.getTotalLength());\n\n\t\t// calculate the point where we want to display the label\n\t\tlet labelPosition =\n\t\t\tlengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\n\t\t\t(index / (link.getLabels().length + 1));\n\n\t\t// find the path where the label will be rendered and calculate the relative position\n\t\tlet pathIndex = 0;\n\t\twhile (pathIndex < link.getRenderedPath().length) {\n\t\t\tif (labelPosition - lengths[pathIndex] < 0) {\n\t\t\t\treturn {\n\t\t\t\t\tpath: link.getRenderedPath()[pathIndex],\n\t\t\t\t\tposition: labelPosition\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// keep searching\n\t\t\tlabelPosition -= lengths[pathIndex];\n\t\t\tpathIndex++;\n\t\t}\n\t};\n\n\tcalculateLabelPosition = () => {\n\t\tconst found = this.findPathAndRelativePositionToRenderLabel(this.props.index + 1);\n\t\tif (!found) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { path, position } = found;\n\n\t\tconst labelDimensions = {\n\t\t\twidth: this.ref.current.offsetWidth,\n\t\t\theight: this.ref.current.offsetHeight\n\t\t};\n\n\t\tconst pathCentre = path.getPointAtLength(position);\n\n\t\tconst labelCoordinates = {\n\t\t\tx: pathCentre.x - labelDimensions.width / 2 + this.props.label.getOptions().offsetX,\n\t\t\ty: pathCentre.y - labelDimensions.height / 2 + this.props.label.getOptions().offsetY\n\t\t};\n\n\t\tthis.ref.current.style.transform = `translate(${labelCoordinates.x}px, ${labelCoordinates.y}px)`;\n\t};\n\n\trender() {\n\t\tconst canvas = this.props.engine.getCanvas();\n\t\treturn (\n\t\t\t<S.Foreign key={this.props.label.getID()} width={canvas.offsetWidth} height={canvas.offsetHeight}>\n\t\t\t\t<S.Label ref={this.ref}>\n\t\t\t\t\t{this.props.engine.getFactoryForLabel(this.props.label).generateReactWidget({ model: this.props.label })}\n\t\t\t\t</S.Label>\n\t\t\t</S.Foreign>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { AbstractReactFactory, GenerateModelEvent, GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LinkLayerModel } from './LinkLayerModel';\nimport { LinkLayerWidget } from './LinkLayerWidget';\n\nexport class LinkLayerFactory extends AbstractReactFactory<LinkLayerModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('diagram-links');\n\t}\n\n\tgenerateModel(event: GenerateModelEvent): LinkLayerModel {\n\t\treturn new LinkLayerModel();\n\t}\n\n\tgenerateReactWidget(event: GenerateWidgetEvent<LinkLayerModel>): JSX.Element {\n\t\treturn <LinkLayerWidget layer={event.model} engine={this.engine} />;\n\t}\n}\n","import { LayerModel, LayerModelGenerics } from '@projectstorm/react-canvas-core';\nimport { LinkModel } from '../link/LinkModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\n\nexport interface LinkLayerModelGenerics extends LayerModelGenerics {\n\tCHILDREN: LinkModel;\n\tENGINE: DiagramEngine;\n}\n\nexport class LinkLayerModel<G extends LinkLayerModelGenerics = LinkLayerModelGenerics> extends LayerModel<G> {\n\tconstructor() {\n\t\tsuper({\n\t\t\ttype: 'diagram-links',\n\t\t\tisSvg: true,\n\t\t\ttransformed: true\n\t\t});\n\t}\n\n\taddModel(model: G['CHILDREN']): void {\n\t\tif (!(model instanceof LinkModel)) {\n\t\t\tthrow new Error('Can only add links to this layer');\n\t\t}\n\t\tmodel.registerListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\t(this.getParent() as DiagramModel).removeLink(model);\n\t\t\t}\n\t\t});\n\t\tsuper.addModel(model);\n\t}\n\n\tgetLinks() {\n\t\treturn this.getModels();\n\t}\n\n\tgetChildModelFactoryBank(engine: G['ENGINE']) {\n\t\treturn engine.getLinkFactories();\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport * as _ from 'lodash';\nimport { LinkWidget } from '../link/LinkWidget';\nimport { LinkLayerModel } from './LinkLayerModel';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface LinkLayerWidgetProps {\n\tlayer: LinkLayerModel;\n\tengine: DiagramEngine;\n}\n\nnamespace S {\n\texport const Container = styled.div``;\n}\n\nexport class LinkLayerWidget extends React.Component<LinkLayerWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{\n\t\t\t\t\t//only perform these actions when we have a diagram\n\t\t\t\t\t_.map(this.props.layer.getLinks(), (link) => {\n\t\t\t\t\t\treturn <LinkWidget key={link.getID()} link={link} diagramEngine={this.props.engine} />;\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</>\n\t\t);\n\t}\n}\n","import { PortModel } from '../port/PortModel';\nimport { PointModel } from './PointModel';\nimport * as _ from 'lodash';\nimport { LabelModel } from '../label/LabelModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\nimport { Point, Polygon, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModel,\n\tBaseModelGenerics,\n\tBaseModelListener,\n\tDeserializeEvent,\n\tModelGeometryInterface\n} from '@projectstorm/react-canvas-core';\n\nexport interface LinkModelListener extends BaseModelListener {\n\tsourcePortChanged?(event: BaseEntityEvent<LinkModel> & { port: null | PortModel }): void;\n\n\ttargetPortChanged?(event: BaseEntityEvent<LinkModel> & { port: null | PortModel }): void;\n}\n\nexport interface LinkModelGenerics extends BaseModelGenerics {\n\tLISTENER: LinkModelListener;\n\tPARENT: DiagramModel;\n}\n\nexport class LinkModel<G extends LinkModelGenerics = LinkModelGenerics>\n\textends BaseModel<G>\n\timplements ModelGeometryInterface {\n\tprotected sourcePort: PortModel | null;\n\tprotected targetPort: PortModel | null;\n\n\tprotected labels: LabelModel[];\n\tprotected points: PointModel[];\n\n\tprotected renderedPaths: SVGPathElement[];\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.points = [\n\t\t\tnew PointModel({\n\t\t\t\tlink: this\n\t\t\t}),\n\t\t\tnew PointModel({\n\t\t\t\tlink: this\n\t\t\t})\n\t\t];\n\t\tthis.sourcePort = null;\n\t\tthis.targetPort = null;\n\t\tthis.renderedPaths = [];\n\t\tthis.labels = [];\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn Polygon.boundingBoxFromPoints(\n\t\t\t_.map(this.points, (point: PointModel) => {\n\t\t\t\treturn point.getPosition();\n\t\t\t})\n\t\t);\n\t}\n\n\tgetSelectionEntities(): Array<BaseModel> {\n\t\tif (this.getTargetPort() && this.getSourcePort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length - 1));\n\t\t}\n\t\t// allow selection of the first point\n\t\tif (!this.getSourcePort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 0, this.points.length - 1));\n\t\t}\n\t\t// allow selection of the last point\n\t\tif (!this.getTargetPort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length));\n\t\t}\n\t\treturn super.getSelectionEntities().concat(this.points);\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.points = _.map(event.data.points || [], (point) => {\n\t\t\tvar p = new PointModel({\n\t\t\t\tlink: this,\n\t\t\t\tposition: new Point(point.x, point.y)\n\t\t\t});\n\t\t\tp.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: point\n\t\t\t});\n\t\t\treturn p;\n\t\t});\n\n\t\t//deserialize labels\n\t\t_.forEach(event.data.labels || [], (label: any) => {\n\t\t\tlet labelOb = (event.engine as DiagramEngine).getFactoryForLabel(label.type).generateModel({});\n\t\t\tlabelOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: label\n\t\t\t});\n\t\t\tthis.addLabel(labelOb);\n\t\t});\n\n\t\t// these happen async, so we use the promises for these (they need to be done like this without the async keyword\n\t\t// because we need the deserailize method to finish for other methods while this happen\n\t\tif (event.data.target) {\n\t\t\tevent.getModel(event.data.targetPort).then((model: PortModel) => {\n\t\t\t\tthis.setTargetPort(model);\n\t\t\t});\n\t\t}\n\t\tif (event.data.source) {\n\t\t\tevent.getModel(event.data.sourcePort).then((model: PortModel) => {\n\t\t\t\tthis.setSourcePort(model);\n\t\t\t});\n\t\t}\n\t}\n\n\tgetRenderedPath(): SVGPathElement[] {\n\t\treturn this.renderedPaths;\n\t}\n\n\tsetRenderedPaths(paths: SVGPathElement[]) {\n\t\tthis.renderedPaths = paths;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tsource: this.sourcePort ? this.sourcePort.getParent().getID() : null,\n\t\t\tsourcePort: this.sourcePort ? this.sourcePort.getID() : null,\n\t\t\ttarget: this.targetPort ? this.targetPort.getParent().getID() : null,\n\t\t\ttargetPort: this.targetPort ? this.targetPort.getID() : null,\n\t\t\tpoints: _.map(this.points, (point) => {\n\t\t\t\treturn point.serialize();\n\t\t\t}),\n\t\t\tlabels: _.map(this.labels, (label) => {\n\t\t\t\treturn label.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.setPoints(\n\t\t\t_.map(this.getPoints(), (point: PointModel) => {\n\t\t\t\treturn point.clone(lookupTable);\n\t\t\t})\n\t\t);\n\t\tif (this.sourcePort) {\n\t\t\tclone.setSourcePort(this.sourcePort.clone(lookupTable));\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tclone.setTargetPort(this.targetPort.clone(lookupTable));\n\t\t}\n\t}\n\n\tclearPort(port: PortModel) {\n\t\tif (this.sourcePort === port) {\n\t\t\tthis.setSourcePort(null);\n\t\t} else if (this.targetPort === port) {\n\t\t\tthis.setTargetPort(null);\n\t\t}\n\t}\n\n\tremove() {\n\t\tif (this.sourcePort) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tisLastPoint(point: PointModel) {\n\t\tvar index = this.getPointIndex(point);\n\t\treturn index === this.points.length - 1;\n\t}\n\n\tgetPointIndex(point: PointModel) {\n\t\treturn this.points.indexOf(point);\n\t}\n\n\tgetPointModel(id: string): PointModel | null {\n\t\tfor (var i = 0; i < this.points.length; i++) {\n\t\t\tif (this.points[i].getID() === id) {\n\t\t\t\treturn this.points[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPortForPoint(point: PointModel): PortModel {\n\t\tif (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n\t\t\treturn this.sourcePort;\n\t\t}\n\t\tif (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n\t\t\treturn this.targetPort;\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPointForPort(port: PortModel): PointModel {\n\t\tif (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n\t\t\treturn this.getFirstPoint();\n\t\t}\n\t\tif (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n\t\t\treturn this.getLastPoint();\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetFirstPoint(): PointModel {\n\t\treturn this.points[0];\n\t}\n\n\tgetLastPoint(): PointModel {\n\t\treturn this.points[this.points.length - 1];\n\t}\n\n\tsetSourcePort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.sourcePort !== null) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tthis.sourcePort = port;\n\t\tthis.fireEvent({ port }, 'sourcePortChanged');\n\t\tif (port.reportedPosition) {\n\t\t\tthis.getPointForPort(port).setPosition(port.getCenter());\n\t\t}\n\t}\n\n\tgetSourcePort(): PortModel {\n\t\treturn this.sourcePort;\n\t}\n\n\tgetTargetPort(): PortModel {\n\t\treturn this.targetPort;\n\t}\n\n\tsetTargetPort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.targetPort !== null) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tthis.targetPort = port;\n\t\tthis.fireEvent({ port }, 'targetPortChanged');\n\t\tif (port.reportedPosition) {\n\t\t\tthis.getPointForPort(port).setPosition(port.getCenter());\n\t\t}\n\t}\n\n\tpoint(x: number, y: number, index: number = 1): PointModel {\n\t\treturn this.addPoint(this.generatePoint(x, y), index);\n\t}\n\n\taddLabel(label: LabelModel) {\n\t\tlabel.setParent(this);\n\t\tthis.labels.push(label);\n\t}\n\n\tgetPoints(): PointModel[] {\n\t\treturn this.points;\n\t}\n\n\tgetLabels() {\n\t\treturn this.labels;\n\t}\n\n\tsetPoints(points: PointModel[]) {\n\t\t_.forEach(points, (point) => {\n\t\t\tpoint.setParent(this);\n\t\t});\n\t\tthis.points = points;\n\t}\n\n\tremovePoint(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel), 1);\n\t}\n\n\tremovePointsBefore(pointModel: PointModel) {\n\t\tthis.points.splice(0, this.getPointIndex(pointModel));\n\t}\n\n\tremovePointsAfter(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel) + 1);\n\t}\n\n\tremoveMiddlePoints() {\n\t\tif (this.points.length > 2) {\n\t\t\tthis.points.splice(0, this.points.length - 2);\n\t\t}\n\t}\n\n\taddPoint<P extends PointModel>(pointModel: P, index = 1): P {\n\t\tpointModel.setParent(this);\n\t\tthis.points.splice(index, 0, pointModel);\n\t\treturn pointModel;\n\t}\n\n\tgeneratePoint(x: number = 0, y: number = 0): PointModel {\n\t\treturn new PointModel({\n\t\t\tlink: this,\n\t\t\tposition: new Point(x, y)\n\t\t});\n\t}\n}\n","import * as React from 'react';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LinkModel } from './LinkModel';\nimport { PointModel } from './PointModel';\nimport * as _ from 'lodash';\nimport { LabelWidget } from '../label/LabelWidget';\nimport { BaseEntityEvent, BasePositionModel, ListenerHandle, PeformanceWidget } from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../port/PortModel';\n\nexport interface LinkProps {\n\tlink: LinkModel;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface LinkState {\n\tsourcePort: PortModel;\n\ttargetPort: PortModel;\n}\n\nexport class LinkWidget extends React.Component<LinkProps, LinkState> {\n\tsourceListener: ListenerHandle;\n\ttargetListener: ListenerHandle;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsourcePort: null,\n\t\t\ttargetPort: null\n\t\t};\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tif (this.sourceListener) {\n\t\t\tthis.sourceListener.deregister();\n\t\t}\n\t\tif (this.targetListener) {\n\t\t\tthis.targetListener.deregister();\n\t\t}\n\t}\n\n\tstatic getDerivedStateFromProps(nextProps: LinkProps, prevState: LinkState): LinkState {\n\t\treturn {\n\t\t\tsourcePort: nextProps.link.getSourcePort(),\n\t\t\ttargetPort: nextProps.link.getTargetPort()\n\t\t};\n\t}\n\n\tinstallTarget() {\n\t\tthis.targetListener && this.targetListener.deregister();\n\n\t\tif (!this.props.link.getTargetPort()) return;\n\t\tthis.targetListener = this.props.link.getTargetPort().registerListener({\n\t\t\treportInitialPosition: (event: BaseEntityEvent<BasePositionModel>) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tinstallSource() {\n\t\tthis.sourceListener && this.sourceListener.deregister();\n\n\t\tif (!this.props.link.getSourcePort()) return;\n\t\tthis.sourceListener = this.props.link.getSourcePort().registerListener({\n\t\t\treportInitialPosition: (event: BaseEntityEvent<BasePositionModel>) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<LinkProps>, prevState: Readonly<LinkState>, snapshot) {\n\t\tif (prevState.sourcePort !== this.state.sourcePort) {\n\t\t\tthis.installSource();\n\t\t}\n\t\tif (prevState.targetPort !== this.state.targetPort) {\n\t\t\tthis.installTarget();\n\t\t}\n\t}\n\n\tpublic static generateLinePath(firstPoint: PointModel, lastPoint: PointModel): string {\n\t\treturn `M${firstPoint.getX()},${firstPoint.getY()} L ${lastPoint.getX()},${lastPoint.getY()}`;\n\t}\n\n\tcomponentDidMount(): void {\n\t\tif (this.props.link.getSourcePort()) {\n\t\t\tthis.installSource();\n\t\t}\n\t\tif (this.props.link.getTargetPort()) {\n\t\t\tthis.installTarget();\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { link } = this.props;\n\n\t\t// only draw the link when we have reported positions\n\t\tif (link.getSourcePort() && !link.getSourcePort().reportedPosition) {\n\t\t\treturn null;\n\t\t}\n\t\tif (link.getTargetPort() && !link.getTargetPort().reportedPosition) {\n\t\t\treturn null;\n\t\t}\n\n\t\t//generate links\n\t\treturn (\n\t\t\t<PeformanceWidget model={this.props.link} serialized={this.props.link.serialize()}>\n\t\t\t\t{() => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<g data-linkid={this.props.link.getID()}>\n\t\t\t\t\t\t\t{this.props.diagramEngine.generateWidgetForLink(link)}\n\t\t\t\t\t\t\t{_.map(this.props.link.getLabels(), (labelModel, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<LabelWidget\n\t\t\t\t\t\t\t\t\t\tkey={labelModel.getID()}\n\t\t\t\t\t\t\t\t\t\tengine={this.props.diagramEngine}\n\t\t\t\t\t\t\t\t\t\tlabel={labelModel}\n\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</PeformanceWidget>\n\t\t);\n\t}\n}\n","import { LinkModel } from './LinkModel';\nimport {\n\tBaseModelListener,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tBasePositionModelOptions\n} from '@projectstorm/react-canvas-core';\n\nexport interface PointModelOptions extends Omit<BasePositionModelOptions, 'type'> {\n\tlink: LinkModel;\n}\n\nexport interface PointModelGenerics {\n\tPARENT: LinkModel;\n\tOPTIONS: PointModelOptions;\n\tLISTENER: BaseModelListener;\n}\n\nexport class PointModel<G extends PointModelGenerics = PointModelGenerics> extends BasePositionModel<\n\tG & BasePositionModelGenerics\n> {\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\ttype: 'point'\n\t\t});\n\t\tthis.parent = options.link;\n\t}\n\n\tisConnectedToPort(): boolean {\n\t\treturn this.parent.getPortForPoint(this) !== null;\n\t}\n\n\tgetLink(): LinkModel {\n\t\treturn this.getParent();\n\t}\n\n\tremove() {\n\t\t//clear references\n\t\tif (this.parent) {\n\t\t\tthis.parent.removePoint(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","import * as React from 'react';\nimport { AbstractReactFactory, GenerateModelEvent, GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { NodeLayerModel } from './NodeLayerModel';\nimport { NodeLayerWidget } from './NodeLayerWidget';\n\nexport class NodeLayerFactory extends AbstractReactFactory<NodeLayerModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('diagram-nodes');\n\t}\n\n\tgenerateModel(event: GenerateModelEvent): NodeLayerModel {\n\t\treturn new NodeLayerModel();\n\t}\n\n\tgenerateReactWidget(event: GenerateWidgetEvent<NodeLayerModel>): JSX.Element {\n\t\treturn <NodeLayerWidget layer={event.model} engine={this.engine} />;\n\t}\n}\n","import { LayerModel, LayerModelGenerics } from '@projectstorm/react-canvas-core';\nimport { NodeModel } from '../node/NodeModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\n\nexport interface NodeLayerModelGenerics extends LayerModelGenerics {\n\tCHILDREN: NodeModel;\n\tENGINE: DiagramEngine;\n}\n\nexport class NodeLayerModel<G extends NodeLayerModelGenerics = NodeLayerModelGenerics> extends LayerModel<G> {\n\tconstructor() {\n\t\tsuper({\n\t\t\ttype: 'diagram-nodes',\n\t\t\tisSvg: false,\n\t\t\ttransformed: true\n\t\t});\n\t}\n\n\taddModel(model: G['CHILDREN']): void {\n\t\tif (!(model instanceof NodeModel)) {\n\t\t\tthrow new Error('Can only add nodes to this layer');\n\t\t}\n\t\tmodel.registerListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\t(this.getParent() as DiagramModel).removeNode(model);\n\t\t\t}\n\t\t});\n\t\tsuper.addModel(model);\n\t}\n\n\tgetChildModelFactoryBank(engine: G['ENGINE']) {\n\t\treturn engine.getNodeFactories();\n\t}\n\n\tgetNodes() {\n\t\treturn this.getModels();\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport * as _ from 'lodash';\nimport { NodeModel } from '../node/NodeModel';\nimport { NodeWidget } from '../node/NodeWidget';\nimport { NodeLayerModel } from './NodeLayerModel';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface NodeLayerWidgetProps {\n\tlayer: NodeLayerModel;\n\tengine: DiagramEngine;\n}\n\nnamespace S {\n\texport const Container = styled.div``;\n}\n\nexport class NodeLayerWidget extends React.Component<NodeLayerWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{_.map(this.props.layer.getNodes(), (node: NodeModel) => {\n\t\t\t\t\treturn <NodeWidget key={node.getID()} diagramEngine={this.props.engine} node={node} />;\n\t\t\t\t})}\n\t\t\t</>\n\t\t);\n\t}\n}\n","import * as _ from 'lodash';\nimport { DiagramModel } from '../../models/DiagramModel';\nimport { PortModel } from '../port/PortModel';\nimport { LinkModel } from '../link/LinkModel';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelListener,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface NodeModelListener extends BaseModelListener {\n\tpositionChanged?(event: BaseEntityEvent<NodeModel>): void;\n}\n\nexport interface NodeModelGenerics extends BasePositionModelGenerics {\n\tLISTENER: NodeModelListener;\n\tPARENT: DiagramModel;\n}\n\nexport class NodeModel<G extends NodeModelGenerics = NodeModelGenerics> extends BasePositionModel<G> {\n\tprotected ports: { [s: string]: PortModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.ports = {};\n\t\tthis.width = 0;\n\t\tthis.height = 0;\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn new Rectangle(this.getPosition(), this.width, this.height);\n\t}\n\n\tsetPosition(point: Point);\n\tsetPosition(x: number, y: number);\n\tsetPosition(x, y?) {\n\t\tlet old = this.position;\n\t\tsuper.setPosition(x, y);\n\n\t\t//also update the port co-ordinates (for make glorious speed)\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tport.setPosition(port.getX() + x - old.x, port.getY() + y - old.y);\n\t\t});\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\n\t\t//deserialize ports\n\t\t_.forEach(event.data.ports, (port: any) => {\n\t\t\tlet portOb = (event.engine as DiagramEngine).getFactoryForPort(port.type).generateModel({});\n\t\t\tportOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: port\n\t\t\t});\n\t\t\t// the links need these\n\t\t\tevent.registerModel(portOb);\n\t\t\tthis.addPort(portOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tports: _.map(this.ports, (port) => {\n\t\t\t\treturn port.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\t// also clone the ports\n\t\tclone.ports = {};\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tclone.addPort(port.clone(lookupTable));\n\t\t});\n\t}\n\n\tremove() {\n\t\tsuper.remove();\n\t\t_.forEach(this.ports, (port) => {\n\t\t\t_.forEach(port.getLinks(), (link) => {\n\t\t\t\tlink.remove();\n\t\t\t});\n\t\t});\n\t}\n\n\tgetPortFromID(id): PortModel | null {\n\t\tfor (var i in this.ports) {\n\t\t\tif (this.ports[i].getID() === id) {\n\t\t\t\treturn this.ports[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetLink(id: string): LinkModel {\n\t\tfor (let portID in this.ports) {\n\t\t\tconst links = this.ports[portID].getLinks();\n\t\t\tif (links[id]) {\n\t\t\t\treturn links[id];\n\t\t\t}\n\t\t}\n\t}\n\n\tgetPort(name: string): PortModel | null {\n\t\treturn this.ports[name];\n\t}\n\n\tgetPorts(): { [s: string]: PortModel } {\n\t\treturn this.ports;\n\t}\n\n\tremovePort(port: PortModel) {\n\t\t// clear the port from the links\n\t\tfor (let link of _.values(port.getLinks())) {\n\t\t\tlink.clearPort(port);\n\t\t}\n\t\t//clear the parent node reference\n\t\tif (this.ports[port.getName()]) {\n\t\t\tthis.ports[port.getName()].setParent(null);\n\t\t\tdelete this.ports[port.getName()];\n\t\t}\n\t}\n\n\taddPort(port: PortModel): PortModel {\n\t\tport.setParent(this);\n\t\tthis.ports[port.getName()] = port;\n\t\treturn port;\n\t}\n\n\tupdateDimensions({ width, height }: { width: number; height: number }) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n}\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { NodeModel } from './NodeModel';\nimport { BaseEntityEvent, BaseModel, ListenerHandle, PeformanceWidget } from '@projectstorm/react-canvas-core';\nimport styled from '@emotion/styled';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport interface NodeProps {\n\tnode: NodeModel;\n\tchildren?: any;\n\tdiagramEngine: DiagramEngine;\n}\n\nnamespace S {\n\texport const Node = styled.div`\n\t\tposition: absolute;\n\t\t-webkit-touch-callout: none; /* iOS Safari */\n\t\t-webkit-user-select: none; /* Chrome/Safari/Opera */\n\t\tuser-select: none;\n\t\tcursor: move;\n\t\tpointer-events: all;\n\t`;\n}\n\nexport class NodeWidget extends React.Component<NodeProps> {\n\tob: any;\n\tref: React.RefObject<HTMLDivElement>;\n\tlistener: ListenerHandle;\n\n\tconstructor(props: NodeProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.ob.disconnect();\n\t\tthis.ob = null;\n\n\t\tthis.listener?.deregister();\n\t\tthis.listener = null;\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<NodeProps>, prevState: Readonly<any>, snapshot?: any): void {\n\t\tif (this.listener && this.props.node !== prevProps.node) {\n\t\t\tthis.listener.deregister();\n\t\t\tthis.installSelectionListener();\n\t\t}\n\t}\n\n\tinstallSelectionListener() {\n\t\tthis.listener = this.props.node.registerListener({\n\t\t\tselectionChanged: (event: BaseEntityEvent<BaseModel> & { isSelected: boolean }) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tupdateSize(width: number, height: number) {\n\t\tthis.props.node.updateDimensions({ width, height });\n\n\t\t//now mark the links as dirty\n\t\ttry {\n\t\t\t_.forEach(this.props.node.getPorts(), (port) => {\n\t\t\t\tport.updateCoords(this.props.diagramEngine.getPortCoords(port));\n\t\t\t});\n\t\t} catch (ex) {}\n\t}\n\n\tcomponentDidMount(): void {\n\t\t// @ts-ignore\n\t\tthis.ob = new ResizeObserver((entities) => {\n\t\t\tconst bounds = entities[0].contentRect;\n\t\t\tthis.updateSize(bounds.width, bounds.height);\n\t\t});\n\n\t\tconst b = this.ref.current.getBoundingClientRect();\n\t\tthis.updateSize(b.width, b.height);\n\t\tthis.ob.observe(this.ref.current);\n\t\tthis.installSelectionListener();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<PeformanceWidget model={this.props.node} serialized={this.props.node.serialize()}>\n\t\t\t\t{() => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<S.Node\n\t\t\t\t\t\t\tclassName=\"node\"\n\t\t\t\t\t\t\tref={this.ref}\n\t\t\t\t\t\t\tdata-nodeid={this.props.node.getID()}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\ttop: this.props.node.getY(),\n\t\t\t\t\t\t\t\tleft: this.props.node.getX()\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{this.props.diagramEngine.generateWidgetForNode(this.props.node)}\n\t\t\t\t\t\t</S.Node>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</PeformanceWidget>\n\t\t);\n\t}\n}\n","import { NodeModel } from '../node/NodeModel';\nimport { LinkModel } from '../link/LinkModel';\nimport * as _ from 'lodash';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelOptions,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tBasePositionModelListener,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\n\nexport enum PortModelAlignment {\n\tTOP = 'top',\n\tLEFT = 'left',\n\tBOTTOM = 'bottom',\n\tRIGHT = 'right'\n}\n\nexport interface PortModelListener extends BasePositionModelListener {\n\t/**\n\t * fires when it first receives positional information\n\t */\n\treportInitialPosition?: (event: BaseEntityEvent<PortModel>) => void;\n}\n\nexport interface PortModelOptions extends BaseModelOptions {\n\talignment?: PortModelAlignment;\n\tmaximumLinks?: number;\n\tname: string;\n}\n\nexport interface PortModelGenerics extends BasePositionModelGenerics {\n\tOPTIONS: PortModelOptions;\n\tPARENT: NodeModel;\n\tLISTENER: PortModelListener;\n}\n\nexport class PortModel<G extends PortModelGenerics = PortModelGenerics> extends BasePositionModel<G> {\n\tlinks: { [id: string]: LinkModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\treportedPosition: boolean;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.links = {};\n\t\tthis.reportedPosition = false;\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.reportedPosition = false;\n\t\tthis.options.name = event.data.name;\n\t\tthis.options.alignment = event.data.alignment;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.options.name,\n\t\t\talignment: this.options.alignment,\n\t\t\tparentNode: this.parent.getID(),\n\t\t\tlinks: _.map(this.links, (link) => {\n\t\t\t\treturn link.getID();\n\t\t\t})\n\t\t};\n\t}\n\n\tsetPosition(point: Point);\n\tsetPosition(x: number, y: number);\n\tsetPosition(x, y?) {\n\t\tlet old = this.position;\n\t\tsuper.setPosition(x, y);\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlet point = link.getPointForPort(this);\n\t\t\tpoint.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.links = {};\n\t\tclone.parentNode = this.getParent().clone(lookupTable);\n\t}\n\n\tgetNode(): NodeModel {\n\t\treturn this.getParent();\n\t}\n\n\tgetName(): string {\n\t\treturn this.options.name;\n\t}\n\n\tgetMaximumLinks(): number {\n\t\treturn this.options.maximumLinks;\n\t}\n\n\tsetMaximumLinks(maximumLinks: number) {\n\t\tthis.options.maximumLinks = maximumLinks;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tdelete this.links[link.getID()];\n\t}\n\n\taddLink(link: LinkModel) {\n\t\tthis.links[link.getID()] = link;\n\t}\n\n\tgetLinks(): { [id: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tpublic createLinkModel(): LinkModel | null {\n\t\tif (_.isFinite(this.options.maximumLinks)) {\n\t\t\tvar numberOfLinks: number = _.size(this.links);\n\t\t\tif (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n\t\t\t\treturn _.values(this.links)[0];\n\t\t\t} else if (numberOfLinks >= this.options.maximumLinks) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\treportPosition() {\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlink.getPointForPort(this).setPosition(this.getCenter());\n\t\t});\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tentity: this\n\t\t\t},\n\t\t\t'reportInitialPosition'\n\t\t);\n\t}\n\n\tgetCenter(): Point {\n\t\treturn new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn new Rectangle(this.position, this.width, this.height);\n\t}\n\n\tupdateCoords(coords: Rectangle) {\n\t\tthis.width = coords.getWidth();\n\t\tthis.height = coords.getHeight();\n\t\tthis.setPosition(coords.getTopLeft());\n\t\tthis.reportedPosition = true;\n\t\tthis.reportPosition();\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { PortModel } from './PortModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { ListenerHandle, Toolkit } from '@projectstorm/react-canvas-core';\n\nexport interface PortProps {\n\tport: PortModel;\n\tengine: DiagramEngine;\n\tclassName?;\n\tstyle?;\n}\n\nexport class PortWidget extends React.Component<PortProps> {\n\tref: React.RefObject<HTMLDivElement>;\n\tengineListenerHandle: ListenerHandle;\n\n\tconstructor(props: PortProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\treport() {\n\t\tthis.props.port.updateCoords(this.props.engine.getPortCoords(this.props.port, this.ref.current));\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.engineListenerHandle && this.engineListenerHandle.deregister();\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<PortProps>, prevState, snapshot?: any): void {\n\t\tif (!this.props.port.reportedPosition) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tcomponentDidMount(): void {\n\t\tthis.engineListenerHandle = this.props.engine.registerListener({\n\t\t\tcanvasReady: () => {\n\t\t\t\tthis.report();\n\t\t\t}\n\t\t});\n\t\tif (this.props.engine.getCanvas()) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tgetExtraProps() {\n\t\tif (Toolkit.TESTING) {\n\t\t\tconst links = _.keys(this.props.port.getNode().getPort(this.props.port.getName()).links).join(',');\n\t\t\treturn {\n\t\t\t\t'data-links': links\n\t\t\t};\n\t\t}\n\t\treturn {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={this.props.style}\n\t\t\t\tref={this.ref}\n\t\t\t\tclassName={`port ${this.props.className || ''}`}\n\t\t\t\tdata-name={this.props.port.getName()}\n\t\t\t\tdata-nodeid={this.props.port.getNode().getID()}\n\t\t\t\t{...this.getExtraProps()}>\n\t\t\t\t{this.props.children}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","export * from './models/DiagramModel';\nexport * from './entities/label/LabelModel';\n\nexport * from './entities/link/LinkModel';\nexport * from './entities/link/PointModel';\nexport * from './entities/link/LinkWidget';\n\nexport * from './entities/link-layer/LinkLayerModel';\nexport * from './entities/link-layer/LinkLayerWidget';\nexport * from './entities/link-layer/LinkLayerFactory';\n\nexport * from './entities/node-layer/NodeLayerModel';\nexport * from './entities/node-layer/NodeLayerWidget';\nexport * from './entities/node-layer/NodeLayerFactory';\n\nexport * from './entities/node/NodeModel';\nexport * from './entities/node/NodeWidget';\nexport * from './entities/port/PortModel';\nexport * from './entities/port/PortWidget';\n\nexport * from './states/DefaultDiagramState';\nexport * from './states/DragDiagramItemsState';\nexport * from './states/DragNewLinkState';\n\nexport * from './DiagramEngine';\n","import * as _ from 'lodash';\nimport { LinkModel } from '../entities/link/LinkModel';\nimport { NodeModel } from '../entities/node/NodeModel';\nimport {\n\tBaseEntityEvent,\n\tBaseEntityListener,\n\tBaseModel,\n\tCanvasModel,\n\tCanvasModelGenerics,\n\tLayerModel,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { NodeLayerModel } from '../entities/node-layer/NodeLayerModel';\nimport { LinkLayerModel } from '../entities/link-layer/LinkLayerModel';\n\nexport interface DiagramListener extends BaseEntityListener {\n\tnodesUpdated?(event: BaseEntityEvent & { node: NodeModel; isCreated: boolean }): void;\n\n\tlinksUpdated?(event: BaseEntityEvent & { link: LinkModel; isCreated: boolean }): void;\n}\n\nexport interface DiagramModelGenerics extends CanvasModelGenerics {\n\tLISTENER: DiagramListener;\n}\n\nexport class DiagramModel<G extends DiagramModelGenerics = DiagramModelGenerics> extends CanvasModel<G> {\n\tprotected activeNodeLayer: NodeLayerModel;\n\tprotected activeLinkLayer: LinkLayerModel;\n\n\tconstructor(options: G['OPTIONS'] = {}) {\n\t\tsuper(options);\n\t\tthis.addLayer(new LinkLayerModel());\n\t\tthis.addLayer(new NodeLayerModel());\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tthis.layers = [];\n\t\tsuper.deserialize(event);\n\t}\n\n\taddLayer(layer: LayerModel): void {\n\t\tsuper.addLayer(layer);\n\t\tif (layer instanceof NodeLayerModel) {\n\t\t\tthis.activeNodeLayer = layer;\n\t\t}\n\t\tif (layer instanceof LinkLayerModel) {\n\t\t\tthis.activeLinkLayer = layer;\n\t\t}\n\t}\n\n\tgetLinkLayers(): LinkLayerModel[] {\n\t\treturn _.filter(this.layers, (layer) => {\n\t\t\treturn layer instanceof LinkLayerModel;\n\t\t}) as LinkLayerModel[];\n\t}\n\n\tgetNodeLayers(): NodeLayerModel[] {\n\t\treturn _.filter(this.layers, (layer) => {\n\t\t\treturn layer instanceof NodeLayerModel;\n\t\t}) as NodeLayerModel[];\n\t}\n\n\tgetActiveNodeLayer(): NodeLayerModel {\n\t\tif (!this.activeNodeLayer) {\n\t\t\tconst layers = this.getNodeLayers();\n\t\t\tif (layers.length === 0) {\n\t\t\t\tthis.addLayer(new NodeLayerModel());\n\t\t\t} else {\n\t\t\t\tthis.activeNodeLayer = layers[0];\n\t\t\t}\n\t\t}\n\t\treturn this.activeNodeLayer;\n\t}\n\n\tgetActiveLinkLayer(): LinkLayerModel {\n\t\tif (!this.activeLinkLayer) {\n\t\t\tconst layers = this.getLinkLayers();\n\t\t\tif (layers.length === 0) {\n\t\t\t\tthis.addLayer(new LinkLayerModel());\n\t\t\t} else {\n\t\t\t\tthis.activeLinkLayer = layers[0];\n\t\t\t}\n\t\t}\n\t\treturn this.activeLinkLayer;\n\t}\n\n\tgetNode(node: string): NodeModel {\n\t\tfor (const layer of this.getNodeLayers()) {\n\t\t\tconst model = layer.getModel(node);\n\t\t\tif (model) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetLink(link: string): LinkModel {\n\t\tfor (const layer of this.getLinkLayers()) {\n\t\t\tconst model = layer.getModel(link);\n\t\t\tif (model) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\t}\n\n\taddAll(...models: BaseModel[]): BaseModel[] {\n\t\t_.forEach(models, (model) => {\n\t\t\tif (model instanceof LinkModel) {\n\t\t\t\tthis.addLink(model);\n\t\t\t} else if (model instanceof NodeModel) {\n\t\t\t\tthis.addNode(model);\n\t\t\t}\n\t\t});\n\t\treturn models;\n\t}\n\n\taddLink(link: LinkModel): LinkModel {\n\t\tthis.getActiveLinkLayer().addModel(link);\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tlink,\n\t\t\t\tisCreated: true\n\t\t\t},\n\t\t\t'linksUpdated'\n\t\t);\n\t\treturn link;\n\t}\n\n\taddNode(node: NodeModel): NodeModel {\n\t\tthis.getActiveNodeLayer().addModel(node);\n\t\tthis.fireEvent({ node, isCreated: true }, 'nodesUpdated');\n\t\treturn node;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tconst removed = _.some(this.getLinkLayers(), (layer) => {\n\t\t\treturn layer.removeModel(link);\n\t\t});\n\t\tif (removed) {\n\t\t\tthis.fireEvent({ link, isCreated: false }, 'linksUpdated');\n\t\t}\n\t}\n\n\tremoveNode(node: NodeModel) {\n\t\tconst removed = _.some(this.getNodeLayers(), (layer) => {\n\t\t\treturn layer.removeModel(node);\n\t\t});\n\t\tif (removed) {\n\t\t\tthis.fireEvent({ node, isCreated: false }, 'nodesUpdated');\n\t\t}\n\t}\n\n\tgetLinks(): LinkModel[] {\n\t\treturn _.flatMap(this.getLinkLayers(), (layer) => {\n\t\t\treturn _.values(layer.getModels());\n\t\t});\n\t}\n\n\tgetNodes(): NodeModel[] {\n\t\treturn _.flatMap(this.getNodeLayers(), (layer) => {\n\t\t\treturn _.values(layer.getModels());\n\t\t});\n\t}\n}\n","import { MouseEvent } from 'react';\nimport {\n\tSelectingState,\n\tState,\n\tAction,\n\tInputType,\n\tActionEvent,\n\tDragCanvasState\n} from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../entities/port/PortModel';\nimport { DragNewLinkState } from './DragNewLinkState';\nimport { DiagramEngine } from '../DiagramEngine';\nimport { DragDiagramItemsState } from './DragDiagramItemsState';\n\nexport class DefaultDiagramState extends State<DiagramEngine> {\n\tdragCanvas: DragCanvasState;\n\tdragNewLink: DragNewLinkState;\n\tdragItems: DragDiagramItemsState;\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'default-diagrams'\n\t\t});\n\t\tthis.childStates = [new SelectingState()];\n\t\tthis.dragCanvas = new DragCanvasState();\n\t\tthis.dragNewLink = new DragNewLinkState();\n\t\tthis.dragItems = new DragDiagramItemsState();\n\n\t\t// determine what was clicked on\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\n\t\t\t\t\t// the canvas was clicked on, transition to the dragging canvas state\n\t\t\t\t\tif (!element) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragCanvas, event);\n\t\t\t\t\t}\n\t\t\t\t\t// initiate dragging a new link\n\t\t\t\t\telse if (element instanceof PortModel) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragNewLink, event);\n\t\t\t\t\t}\n\t\t\t\t\t// move the items (and potentially link points)\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragItems, event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n","import { Action, ActionEvent, InputType, MoveItemsState } from '@projectstorm/react-canvas-core';\nimport * as _ from 'lodash';\nimport { PointModel } from '../entities/link/PointModel';\nimport { DiagramEngine } from '../DiagramEngine';\nimport { PortModel } from '../entities/port/PortModel';\nimport { MouseEvent } from 'react';\nimport { LinkModel } from '../entities/link/LinkModel';\n\nexport class DragDiagramItemsState extends MoveItemsState<DiagramEngine> {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst item = this.engine.getMouseElement(event.event);\n\t\t\t\t\tif (item instanceof PortModel) {\n\t\t\t\t\t\t_.forEach(this.initialPositions, (position) => {\n\t\t\t\t\t\t\tif (position.item instanceof PointModel) {\n\t\t\t\t\t\t\t\tconst link = position.item.getParent() as LinkModel;\n\n\t\t\t\t\t\t\t\t// only care about the last links\n\t\t\t\t\t\t\t\tif (link.getLastPoint() !== position.item) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (link.getSourcePort().canLinkToPort(item)) {\n\t\t\t\t\t\t\t\t\tlink.setTargetPort(item);\n\t\t\t\t\t\t\t\t\titem.reportPosition();\n\t\t\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n","import {\n\tAbstractDisplacementState,\n\tAbstractDisplacementStateEvent,\n\tAction,\n\tActionEvent,\n\tInputType\n} from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../entities/port/PortModel';\nimport { MouseEvent } from 'react';\nimport { LinkModel } from '../entities/link/LinkModel';\nimport { DiagramEngine } from '../DiagramEngine';\n\nexport interface DragNewLinkStateOptions {\n\t/**\n\t * If enabled, the links will stay on the canvas if they dont connect to a port\n\t * when dragging finishes\n\t */\n\tallowLooseLinks?: boolean;\n\t/**\n\t * If enabled, then a link can still be drawn from the port even if it is locked\n\t */\n\tallowLinksFromLockedPorts?: boolean;\n}\n\nexport class DragNewLinkState extends AbstractDisplacementState<DiagramEngine> {\n\tport: PortModel;\n\tlink: LinkModel;\n\tconfig: DragNewLinkStateOptions;\n\n\tconstructor(options: DragNewLinkStateOptions = {}) {\n\t\tsuper({ name: 'drag-new-link' });\n\n\t\tthis.config = {\n\t\t\tallowLooseLinks: true,\n\t\t\tallowLinksFromLockedPorts: false,\n\t\t\t...options\n\t\t};\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent, PortModel>) => {\n\t\t\t\t\tthis.port = this.engine.getMouseElement(event.event) as PortModel;\n\t\t\t\t\tif (!this.config.allowLinksFromLockedPorts && this.port.isLocked()) {\n\t\t\t\t\t\tthis.eject();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.link = this.port.createLinkModel();\n\n\t\t\t\t\t// if no link is given, just eject the state\n\t\t\t\t\tif (!this.link) {\n\t\t\t\t\t\tthis.eject();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.link.setSelected(true);\n\t\t\t\t\tthis.link.setSourcePort(this.port);\n\t\t\t\t\tthis.engine.getModel().addLink(this.link);\n\t\t\t\t\tthis.port.reportPosition();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst model = this.engine.getMouseElement(event.event);\n\t\t\t\t\t// check to see if we connected to a new port\n\t\t\t\t\tif (model instanceof PortModel) {\n\t\t\t\t\t\tif (this.port.canLinkToPort(model)) {\n\t\t\t\t\t\t\tthis.link.setTargetPort(model);\n\t\t\t\t\t\t\tmodel.reportPosition();\n\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.link.remove();\n\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.config.allowLooseLinks) {\n\t\t\t\t\t\tthis.link.remove();\n\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Calculates the link's far-end point position on mouse move.\n\t * In order to be as precise as possible the mouse initialXRelative & initialYRelative are taken into account as well\n\t * as the possible engine offset\n\t */\n\tfireMouseMoved(event: AbstractDisplacementStateEvent): any {\n\t\tconst portPos = this.port.getPosition();\n\t\tconst zoomLevelPercentage = this.engine.getModel().getZoomLevel() / 100;\n\t\tconst engineOffsetX = this.engine.getModel().getOffsetX() / zoomLevelPercentage;\n\t\tconst engineOffsetY = this.engine.getModel().getOffsetY() / zoomLevelPercentage;\n\t\tconst initialXRelative = this.initialXRelative / zoomLevelPercentage;\n\t\tconst initialYRelative = this.initialYRelative / zoomLevelPercentage;\n\t\tconst linkNextX = portPos.x - engineOffsetX + (initialXRelative - portPos.x) + event.virtualDisplacementX;\n\t\tconst linkNextY = portPos.y - engineOffsetY + (initialYRelative - portPos.y) + event.virtualDisplacementY;\n\n\t\tthis.link.getLastPoint().setPosition(linkNextX, linkNextY);\n\t\tthis.engine.repaintCanvas();\n\t}\n}\n","module.exports = require(\"@emotion/styled\");;","module.exports = require(\"@projectstorm/geometry\");;","module.exports = require(\"@projectstorm/react-canvas-core\");;","module.exports = require(\"lodash\");;","module.exports = require(\"react\");;","module.exports = require(\"resize-observer-polyfill\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(418);\n"],"sourceRoot":""}